%YAML 1.2
---
# http://www.sublimetext.com/docs/syntax.html

name: Inform 6

file_extensions:
  - inf
  - h

scope: source.inform

variables:
  ident: '\b[a-zA-Z_]+[a-zA-Z0-9]*\b'
  messages: '(Answer|Ask|Attack|Blow|Burn|Buy|Climb|Close|Catch|Consult|Cut|Dig|Disrobe|Drink|Drop|Eat|Enter|Examine|Exit|Fill|FullScore|GetOff|Give|Go|Insert|Inv|Jump|JumpOver|Kiss|Listen|LMode1|LMode2|LMode3|Lock|Look|LookUnder|Mild|ListMiscellany|Miscellany|No|Yes|NotifyOff|NotifyOn|Open|Order|Pray|Prompt|Pull|Push|PushDir|PutOn|Quit|Remove|Restart|Restore|Rub|Save|Score|ScriptOn|ScriptOff|Search|Set|SetTo|Show|Sing|Sleep|Smell|Sorry|Squeeze|Strong|Swim|Swing|SwitchOff|SwitchOn|Take|Taste|Tell|Touch|Think|Tie|ThrowAt|Turn|Unlock|VagueGo|Verify|Wait|Wake|WakeOther|Wave|WaveHands|Wear|Yes)'

contexts:

  main:
    - include: library_messages
    - include: vars
    - include: operators
    - include: punct_keyword
    - include: directives
    - include: conditional
    - include: control
    - include: strings
    - include: functions
    - include: comments
    - include: literal_numeric
    - include: function_call

  function_call:
    - match: '({{ident}})\('
      captures:
        1: variable.function
  
  literal_numeric:
    - match: '\b((\$[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f)?\b'
      scope: constant.numeric.inform

  control:
    - match: \b(box|break|continue|font(\s+)(on|off)|for|give|jump|new_line|objectloop|print|print_ret|remove|return|rfalse|rtrue|spaces|string|style(\s+)(roman|bold|underline|reverse|fixed)|switch|until|with)\b
      scope: keyword.control.inform

  conditional:
    - match: \b(if|else|while|do)\b
      scope: keyword.control.conditional

  punct_keyword:
    - match: (<<|>>)
      scope: punctuation.definition.keyword

  operators:
    - include: operator
    - include: operator_assign
    - include: operator_logical

  vars:
    - include: language_vars

  language_vars:
    - match: \b(self|true|false)\b
      scope: variable.language

  operator:
    - match: \b(in|notin|ofclass|provides|or|has|hasnt|->)\b
      scope: keyword

  operator_assign:
    - match: =
      scope: keyword.operator.assignment

  operator_logical:
    - match: '==|>=|<=|>='
      scope: keyword.operator.logical

  directives:
    - match: \b(Abbreviate|Array|Attribute|Class|Constant|Default|End|Endif|Extend|Global|Ifdef|Ifndef|Ifnot|Iftrue|Iffalse|Import|Include|Link|Lowstring|Message|Object|Property|Release|Replace|Serial|Switches|Statusline(\s+)(score|time)|System_file|Verb|Zcharacter)\b
      scope: keyword.other.directive.inform


  library_messages:
    - match: '({{messages}})(,\s*{{messages}})*:'
      scope: variable.constant

  comments:
    - match: (!)(.*)$\n?
      scope: comment.line.exclamation.inform
      captures:
        1: punctuation.definition.comment.inform

  functions:
    - match: '(?:\s*)\[(?:\s*)(.*)(?:\s*);'
      scope: meta.function.inform
      captures:
        1: entity.name.function.inform

  strings:
    - include: strings_single
    - include: strings_double

  strings_single:
    - match: "'"
      captures:
        0: punctuation.definition.string.begin.inform
      push:
        - meta_scope: string.quoted.single.inform
        - match: "'"
          captures:
            0: punctuation.definition.string.end.inform
          pop: true
        - match: \\.
          scope: constant.character.escape.inform

  strings_double:
    - match: '"'
      captures:
        0: punctuation.definition.string.begin.inform
      push:
        - meta_scope: string.quoted.double.inform
        - match: '"'
          captures:
            0: punctuation.definition.string.end.inform
          pop: true
